/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as JoinRequest from "./JoinRequest";
import * as common from "./";
export const serviceName: string = "GameService";
export const annotations: thrift.IThriftAnnotations = {};
export const methodAnnotations: thrift.IMethodAnnotations = {
    createGame: {
        annotations: {},
        fieldAnnotations: {}
    },
    join: {
        annotations: {},
        fieldAnnotations: {}
    },
    add: {
        annotations: {},
        fieldAnnotations: {}
    }
};
export const methodNames: Array<string> = ["createGame", "join", "add"];
export const methodParameters: {
    [methodName: string]: number;
} = {
    createGame: 2,
    join: 3,
    add: 3
};
export interface ICreateGame__Args {
    numberOfPlayers: number;
}
export interface ICreateGame__ArgsArgs {
    numberOfPlayers: number;
}
export const CreateGame__ArgsCodec: thrift.IStructCodec<ICreateGame__ArgsArgs, ICreateGame__Args> = {
    encode(args: ICreateGame__ArgsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            numberOfPlayers: args.numberOfPlayers
        };
        output.writeStructBegin("CreateGame__Args");
        if (obj.numberOfPlayers != null) {
            output.writeFieldBegin("numberOfPlayers", thrift.TType.I32, -1);
            output.writeI32(obj.numberOfPlayers);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[numberOfPlayers] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICreateGame__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.numberOfPlayers = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.numberOfPlayers !== undefined) {
            return {
                numberOfPlayers: _args.numberOfPlayers
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateGame__Args from input");
        }
    }
};
export class CreateGame__Args extends thrift.StructLike implements ICreateGame__Args {
    public numberOfPlayers: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICreateGame__ArgsArgs) {
        super();
        if (args.numberOfPlayers != null) {
            const value_2: number = args.numberOfPlayers;
            this.numberOfPlayers = value_2;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[numberOfPlayers] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): CreateGame__Args {
        return new CreateGame__Args(CreateGame__ArgsCodec.decode(input));
    }
    public static write(args: ICreateGame__ArgsArgs, output: thrift.TProtocol): void {
        return CreateGame__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CreateGame__ArgsCodec.encode(this, output);
    }
}
export interface IJoin__Args {
    gameId: number;
    request: JoinRequest.IJoinRequest;
}
export interface IJoin__ArgsArgs {
    gameId: number;
    request: JoinRequest.IJoinRequestArgs;
}
export const Join__ArgsCodec: thrift.IStructCodec<IJoin__ArgsArgs, IJoin__Args> = {
    encode(args: IJoin__ArgsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            gameId: args.gameId,
            request: args.request
        };
        output.writeStructBegin("Join__Args");
        if (obj.gameId != null) {
            output.writeFieldBegin("gameId", thrift.TType.I32, -1);
            output.writeI32(obj.gameId);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[gameId] is unset!");
        }
        if (obj.request != null) {
            output.writeFieldBegin("request", thrift.TType.STRUCT, -2);
            JoinRequest.JoinRequestCodec.encode(obj.request, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[request] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IJoin__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: number = input.readI32();
                        _args.gameId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case -2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: JoinRequest.IJoinRequest = JoinRequest.JoinRequestCodec.decode(input);
                        _args.request = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.gameId !== undefined && _args.request !== undefined) {
            return {
                gameId: _args.gameId,
                request: _args.request
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Join__Args from input");
        }
    }
};
export class Join__Args extends thrift.StructLike implements IJoin__Args {
    public gameId: number;
    public request: JoinRequest.IJoinRequest;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IJoin__ArgsArgs) {
        super();
        if (args.gameId != null) {
            const value_5: number = args.gameId;
            this.gameId = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[gameId] is unset!");
        }
        if (args.request != null) {
            const value_6: JoinRequest.IJoinRequest = new JoinRequest.JoinRequest(args.request);
            this.request = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[request] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Join__Args {
        return new Join__Args(Join__ArgsCodec.decode(input));
    }
    public static write(args: IJoin__ArgsArgs, output: thrift.TProtocol): void {
        return Join__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Join__ArgsCodec.encode(this, output);
    }
}
export interface IAdd__Args {
    left: number;
    right: number;
}
export interface IAdd__ArgsArgs {
    left: number;
    right: number;
}
export const Add__ArgsCodec: thrift.IStructCodec<IAdd__ArgsArgs, IAdd__Args> = {
    encode(args: IAdd__ArgsArgs, output: thrift.TProtocol): void {
        const obj: any = {
            left: args.left,
            right: args.right
        };
        output.writeStructBegin("Add__Args");
        if (obj.left != null) {
            output.writeFieldBegin("left", thrift.TType.I32, -1);
            output.writeI32(obj.left);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[left] is unset!");
        }
        if (obj.right != null) {
            output.writeFieldBegin("right", thrift.TType.I32, -2);
            output.writeI32(obj.right);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[right] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAdd__Args {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.left = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case -2:
                    if (fieldType === thrift.TType.I32) {
                        const value_8: number = input.readI32();
                        _args.right = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.left !== undefined && _args.right !== undefined) {
            return {
                left: _args.left,
                right: _args.right
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Add__Args from input");
        }
    }
};
export class Add__Args extends thrift.StructLike implements IAdd__Args {
    public left: number;
    public right: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAdd__ArgsArgs) {
        super();
        if (args.left != null) {
            const value_9: number = args.left;
            this.left = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[left] is unset!");
        }
        if (args.right != null) {
            const value_10: number = args.right;
            this.right = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[right] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Add__Args {
        return new Add__Args(Add__ArgsCodec.decode(input));
    }
    public static write(args: IAdd__ArgsArgs, output: thrift.TProtocol): void {
        return Add__ArgsCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Add__ArgsCodec.encode(this, output);
    }
}
export interface ICreateGame__Result {
    success?: number;
}
export interface ICreateGame__ResultArgs {
    success?: number;
}
export const CreateGame__ResultCodec: thrift.IStructCodec<ICreateGame__ResultArgs, ICreateGame__Result> = {
    encode(args: ICreateGame__ResultArgs, output: thrift.TProtocol): void {
        const obj: any = {
            success: args.success
        };
        output.writeStructBegin("CreateGame__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.I32, 0);
            output.writeI32(obj.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ICreateGame__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.success = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            success: _args.success
        };
    }
};
export class CreateGame__Result extends thrift.StructLike implements ICreateGame__Result {
    public success?: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ICreateGame__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_12: number = args.success;
            this.success = value_12;
        }
    }
    public static read(input: thrift.TProtocol): CreateGame__Result {
        return new CreateGame__Result(CreateGame__ResultCodec.decode(input));
    }
    public static write(args: ICreateGame__ResultArgs, output: thrift.TProtocol): void {
        return CreateGame__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return CreateGame__ResultCodec.encode(this, output);
    }
}
export interface IJoin__Result {
    success?: number;
    e?: common.IGameNotFound;
}
export interface IJoin__ResultArgs {
    success?: number;
    e?: common.IGameNotFoundArgs;
}
export const Join__ResultCodec: thrift.IStructCodec<IJoin__ResultArgs, IJoin__Result> = {
    encode(args: IJoin__ResultArgs, output: thrift.TProtocol): void {
        const obj: any = {
            success: args.success,
            e: args.e
        };
        output.writeStructBegin("Join__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.I32, 0);
            output.writeI32(obj.success);
            output.writeFieldEnd();
        }
        if (obj.e != null) {
            output.writeFieldBegin("e", thrift.TType.STRUCT, 1);
            common.GameNotFoundCodec.encode(obj.e, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IJoin__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.I32) {
                        const value_13: number = input.readI32();
                        _args.success = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_14: common.IGameNotFound = common.GameNotFoundCodec.decode(input);
                        _args.e = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            success: _args.success,
            e: _args.e
        };
    }
};
export class Join__Result extends thrift.StructLike implements IJoin__Result {
    public success?: number;
    public e?: common.IGameNotFound;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IJoin__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_15: number = args.success;
            this.success = value_15;
        }
        if (args.e != null) {
            const value_16: common.IGameNotFound = new common.GameNotFound(args.e);
            this.e = value_16;
        }
    }
    public static read(input: thrift.TProtocol): Join__Result {
        return new Join__Result(Join__ResultCodec.decode(input));
    }
    public static write(args: IJoin__ResultArgs, output: thrift.TProtocol): void {
        return Join__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Join__ResultCodec.encode(this, output);
    }
}
export interface IAdd__Result {
    success?: number;
}
export interface IAdd__ResultArgs {
    success?: number;
}
export const Add__ResultCodec: thrift.IStructCodec<IAdd__ResultArgs, IAdd__Result> = {
    encode(args: IAdd__ResultArgs, output: thrift.TProtocol): void {
        const obj: any = {
            success: args.success
        };
        output.writeStructBegin("Add__Result");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.I32, 0);
            output.writeI32(obj.success);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAdd__Result {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.TType.I32) {
                        const value_17: number = input.readI32();
                        _args.success = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            success: _args.success
        };
    }
};
export class Add__Result extends thrift.StructLike implements IAdd__Result {
    public success?: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAdd__ResultArgs = {}) {
        super();
        if (args.success != null) {
            const value_18: number = args.success;
            this.success = value_18;
        }
    }
    public static read(input: thrift.TProtocol): Add__Result {
        return new Add__Result(Add__ResultCodec.decode(input));
    }
    public static write(args: IAdd__ResultArgs, output: thrift.TProtocol): void {
        return Add__ResultCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return Add__ResultCodec.encode(this, output);
    }
}
export class Client<Context = any> extends thrift.ThriftClient<Context> {
    public static readonly serviceName: string = serviceName;
    public static readonly annotations: thrift.IThriftAnnotations = annotations;
    public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public static readonly methodNames: Array<string> = methodNames;
    public readonly _serviceName: string = serviceName;
    public readonly _annotations: thrift.IThriftAnnotations = annotations;
    public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public readonly _methodNames: Array<string> = methodNames;
    public readonly _methodParameters?: {
        [methodName: string]: number;
    } = methodParameters;
    public createGame(numberOfPlayers: number, context?: Context): Promise<number> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("createGame", thrift.MessageType.CALL, this.incrementRequestId());
        const args: ICreateGame__ArgsArgs = { numberOfPlayers };
        CreateGame__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "createGame") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: ICreateGame__Result = CreateGame__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "createGame failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public join(gameId: number, request: JoinRequest.IJoinRequestArgs, context?: Context): Promise<number> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("join", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IJoin__ArgsArgs = { gameId, request };
        Join__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "join") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IJoin__Result = Join__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.e != null) {
                            return Promise.reject(result.e);
                        }
                        else if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "join failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    public add(left: number, right: number, context?: Context): Promise<number> {
        const writer: thrift.TTransport = new this.transport();
        const output: thrift.TProtocol = new this.protocol(writer);
        output.writeMessageBegin("add", thrift.MessageType.CALL, this.incrementRequestId());
        const args: IAdd__ArgsArgs = { left, right };
        Add__ArgsCodec.encode(args, output);
        output.writeMessageEnd();
        return this.connection.send(writer.flush(), context).then((data: Buffer) => {
            const reader: thrift.TTransport = this.transport.receiver(data);
            const input: thrift.TProtocol = new this.protocol(reader);
            try {
                const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                if (fieldName === "add") {
                    if (messageType === thrift.MessageType.EXCEPTION) {
                        const err: thrift.TApplicationException = thrift.TApplicationExceptionCodec.decode(input);
                        input.readMessageEnd();
                        return Promise.reject(err);
                    }
                    else {
                        const result: IAdd__Result = Add__ResultCodec.decode(input);
                        input.readMessageEnd();
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "add failed: unknown result"));
                        }
                    }
                }
                else {
                    return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
}
export interface IHandler<Context = any> {
    createGame(numberOfPlayers: number, context?: Context): number | Promise<number>;
    join(gameId: number, request: JoinRequest.IJoinRequest, context?: Context): number | Promise<number>;
    add(left: number, right: number, context?: Context): number | Promise<number>;
}
export class Processor<Context = any> extends thrift.ThriftProcessor<Context, IHandler<Context>> {
    protected readonly _handler: IHandler<Context>;
    public static readonly serviceName: string = serviceName;
    public static readonly annotations: thrift.IThriftAnnotations = annotations;
    public static readonly methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public static readonly methodNames: Array<string> = methodNames;
    public readonly _serviceName: string = serviceName;
    public readonly _annotations: thrift.IThriftAnnotations = annotations;
    public readonly _methodAnnotations: thrift.IMethodAnnotations = methodAnnotations;
    public readonly _methodNames: Array<string> = methodNames;
    constructor(handler: IHandler<Context>) {
        super();
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<Buffer>((resolve, reject): void => {
            const metadata: thrift.IThriftMessage = input.readMessageBegin();
            const fieldName: string = metadata.fieldName;
            const requestId: number = metadata.requestId;
            const methodName: string = "process_" + fieldName;
            switch (methodName) {
                case "process_createGame": {
                    resolve(this.process_createGame(requestId, input, output, context));
                    break;
                }
                case "process_join": {
                    resolve(this.process_join(requestId, input, output, context));
                    break;
                }
                case "process_add": {
                    resolve(this.process_add(requestId, input, output, context));
                    break;
                }
                default: {
                    input.skip(thrift.TType.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fieldName;
                    const err = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fieldName, thrift.MessageType.EXCEPTION, requestId);
                    thrift.TApplicationExceptionCodec.encode(err, output);
                    output.writeMessageEnd();
                    resolve(output.flush());
                    break;
                }
            }
        });
    }
    public process_createGame(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<number>((resolve, reject): void => {
            try {
                const args: ICreateGame__Args = CreateGame__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.createGame(args.numberOfPlayers, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): Buffer => {
            const result: ICreateGame__ResultArgs = { success: data };
            output.writeMessageBegin("createGame", thrift.MessageType.REPLY, requestId);
            CreateGame__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("createGame", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
    public process_join(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<number>((resolve, reject): void => {
            try {
                const args: IJoin__Args = Join__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.join(args.gameId, args.request, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): Buffer => {
            const result: IJoin__ResultArgs = { success: data };
            output.writeMessageBegin("join", thrift.MessageType.REPLY, requestId);
            Join__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            if (err instanceof common.GameNotFound) {
                const result: IJoin__ResultArgs = { e: err };
                output.writeMessageBegin("join", thrift.MessageType.REPLY, requestId);
                Join__ResultCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
            else {
                const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("join", thrift.MessageType.EXCEPTION, requestId);
                thrift.TApplicationExceptionCodec.encode(result, output);
                output.writeMessageEnd();
                return output.flush();
            }
        });
    }
    public process_add(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
        return new Promise<number>((resolve, reject): void => {
            try {
                const args: IAdd__Args = Add__ArgsCodec.decode(input);
                input.readMessageEnd();
                resolve(this._handler.add(args.left, args.right, context));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): Buffer => {
            const result: IAdd__ResultArgs = { success: data };
            output.writeMessageBegin("add", thrift.MessageType.REPLY, requestId);
            Add__ResultCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        }).catch((err: Error): Buffer => {
            const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("add", thrift.MessageType.EXCEPTION, requestId);
            thrift.TApplicationExceptionCodec.encode(result, output);
            output.writeMessageEnd();
            return output.flush();
        });
    }
}
